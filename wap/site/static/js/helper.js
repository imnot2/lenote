define(function(){    var helper = function(){};        _.extend(helper.prototype, {        componentizeUrl: function(url){            url = url || window.location.href;            var data = {protocol: null, domain: null, domainNoWww: null, port: null, path: null, queryString: null},                urlMatcher = /^(.*?):\/\/((www\.)?(.*?))(:\d+)?(\/.*?)(\?.*)?$/,                matches = urlMatcher.exec(url);            data.protocol = matches[1];            data.domain = matches[2];            data.domainNoWww = matches[4];            data.port = matches[5];            data.path = matches[6];            data.queryString = matches[7];            return data;       },              parseQueryParams: function(url){           if(!url) url = window.location.href;           var data = this.componentizeUrl(url), queryString = data.queryString, params = {};           if (!queryString) return params;           queryString = queryString.substr(1).split("#")[0];           var pairs = queryString.split("&"), i;           for(i = 0; i < pairs.length; i++){             var item = pairs[i].split("=");             if(item[1]){                item[1] = item[1].replace(/\+/g, " ");             }             params[item[0].toLowerCase()] = item[1];          }          return params;       },              redirect: function(url){            if(url) location.href = url;       },              asynRequest: function(url, data, callback, header, method){           header = header || {};           $.ajax($.extend({               url: url,               type: method || 'POST', dataType: 'json', cache: false,               contentType:'application/json; charset=utf-8',               data: data && JSON.stringify(data),               success: function(response, status){                   var s = status == 'success' && response.returnCode == 200;                   callback(s, response);               },               error: function(xhr, msg, eThrow){                   callback(false, msg);               }           }, header));       },              notify: {            show: function(title, message){                var _template = _.template($('#notifyscript').html());                $('body').append(_template({notify: {                    title: title || '努力登录中...',                    overlayClass: 'transparent',                    tips: message || '先让眼睛休息一下吧~'                }}));            },            close: function(){                $('#overlay, #notify').remove();            }       },       mask:{            show:function(){                var mask;                return function(){                    if(mask){                      mask.show();                    }else{                      $('body').append('<div id="mask"></div>');                      mask = $('body').children('#mask');                    }                    return mask;                    //return mask ? mask.show() : ( mask = $('body').children('#mask'));                }            }(),            hide:function(){              $('#mask').html('').hide();            }       },              strip_tags: function(str){            str = $.trim(str || '');            return str.replace(/<[^>]+>/igm, '');       },              toHtml: function(str){            //str = (str || '').replace(/&/igm, '&amp;').replace(/\n/igm, '<br/>').replace(/\s/igm, '&nbsp;');            str = (str || '').replace(/\n/igm, '<br/>').replace(/\s/igm, '&nbsp;');            return str;       },              unhtml: function(str, reg){            return str ? str.replace(reg || /[&<">'](?:(amp|lt|quot|gt|#39|nbsp);)?/g, function(a, b){                if(b){                    return a;                }else{                    return{                        '<':'&lt;',                        '&':'&amp;',                        '"':'&quot;',                        '>':'&gt;',                        "'":'&#39;'                    }[a];                }            }) : '';       },              trim: function(str){            return (str || '').replace(/\s|\n/igm, '');       },              html: function(str){            return str ? str.replace(/&((g|l|quo)t|amp|#39);/g, function(m){                return {                    '&lt;':'<',                    '&amp;':'&',                    '&quot;':'"',                    '&gt;':'>',                    '&#39;':"'"                }[m];            }) : '';       },              getCollectData: function(token){            var ip = ($('#ip').val() || '').trim();            return '1.0.0/wap///wap//' + ip + '/' + (token || '') + '/wap/' + $.browser.version;       },	     	  filterXSS: function(html){    		return html && filterXSS(html, {    		   allowCommentTag: false,    		   whiteList: $.extend(filterXSS.whiteList, {    				'ln-photo': ['key', '_data'],    				'ln-attachment': ['key'],    				'ln-audio': ['key'],    				'ln-text': ['key'],    				'ln-video': ['key']    		   }),    		   onIgnoreTagAttr: function(tag, name, value, isWhiteAttr){    				if(name === 'style'){    					value = filterXSS.safeAttrValue(tag, name, value);    					return value? name + '="' + value + '"' : name;    				}    		   }    		});	   }    });        return new helper();});