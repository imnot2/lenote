{
  "name": "koa-csrf",
  "description": "CSRF tokens for koa",
  "version": "1.1.1",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/koajs/csrf"
  },
  "devDependencies": {
    "koa": "~0.6.0",
    "koa-session": ">= 1.2.0",
    "co-body": "*",
    "mocha": "*",
    "should": "*",
    "supertest": "*"
  },
  "scripts": {
    "test": "make test;"
  },
  "engines": {
    "node": ">= 0.11.3"
  },
  "files": [
    "index.js"
  ],
  "readme": "# Koa CSRF [![Build Status](https://travis-ci.org/koajs/csrf.png)](https://travis-ci.org/koajs/csrf)\n\nCSRF tokens for koa.\n\n## Install\n\n```\nnpm install koa-csrf\n```\n\n## API\n\nTo install, do:\n\n```js\nrequire('koa-csrf')(app, options)\n```\n\n### Options\n\nSince people seem to really care about the entropy of CSRF tokens, the hashing algorithm, etc.\nYou can override these functions:\n\n- `length` - Secret key length, default `15`.\n- `secret` - `(length) -> [string]` a function that creates a secret stored as `this.session.secret`\n- `salt` - `(length) -> [string]` a function that creates a salt.\n- `tokenize` - `(secret, salt) -> salt;[string]` a function that creates the CSRF token.\n\n### this.csrf\n\nLazily creates a CSRF token.\nCSRF tokens change on every request.\n\n```js\napp.use(function* () {\n  this.render({\n    csrf: this.csrf\n  })\n})\n```\n\n### this.assertCSRF([body])\n\nCheck the CSRF token of a request with an optional body.\nWill throw if the CSRF token does not exist or is not valid.\n\n```js\napp.use(function* () {\n  var body = yield parse(this) // co-body or something\n  try {\n    this.assertCSRF(body)\n  } catch (err) {\n    this.status = 403\n    this.body = {\n      message: 'This CSRF token is invalid!'\n    }\n    return\n  }\n})\n```\n\n### Middleware\n\nYou can use this module as a koa middleware, it is similar to `connect-csrf`.\nin most situation, you only need:\n\n```js\nvar koa = require('koa')\nvar csrf = require('koa-csrf')\nvar session = require('koa-session')\n\nvar app = koa()\napp.keys = ['session secret']\napp.use(session())\napp.use(csrf())\n\napp.use(function* () {\n  if (this.method === 'GET') {\n    this.body = this.csrf\n  } else if (this.method === 'POST') {\n    this.status = 204\n  }\n})\n```\n\nAll the options work fine in middleware mode.\n\n```js\napp.use(csrf({\n  length: 20\n}))\n```\n\nYou can redefinition csrf handle method by pass `opts.middleware`,\nthe default handler is `csrf.middleware`.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Jonathan Ong me@jongleberry.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/koajs/csrf/issues"
  },
  "homepage": "https://github.com/koajs/csrf",
  "_id": "koa-csrf@1.1.1",
  "_from": "koa-csrf@^1.1.1"
}
