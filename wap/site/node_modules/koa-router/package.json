{
  "name": "koa-router",
  "description": "Router middleware for koa. Provides RESTful resource routing.",
  "repository": {
    "type": "git",
    "url": "https://github.com/alexmingoia/koa-router.git"
  },
  "author": {
    "name": "Alex Mingoia",
    "email": "talk@alexmingoia.com"
  },
  "version": "3.3.0",
  "keywords": [
    "koa",
    "middleware",
    "router",
    "route"
  ],
  "dependencies": {
    "methods": "^1.0.1",
    "path-to-regexp": "^1.0.0",
    "debug": "^1.0.2",
    "koa-compose": "^2.3.0"
  },
  "devDependencies": {
    "koa": "^0.10.0",
    "should": "^4.0.4",
    "mocha": "^1.17.1",
    "supertest": "^0.13.0"
  },
  "scripts": {
    "test": "NODE_ENV=test node_modules/mocha/bin/mocha --harmony-generators --recursive --reporter spec"
  },
  "engines": {
    "node": "> 0.11.4"
  },
  "license": "MIT",
  "readme": "# Router middleware for [koa](https://github.com/koajs/koa)\n\n[![Build Status](https://secure.travis-ci.org/alexmingoia/koa-router.png)](http://travis-ci.org/alexmingoia/koa-router)\n[![Dependency Status](https://david-dm.org/alexmingoia/koa-router.png)](http://david-dm.org/alexmingoia/koa-router)\n[![NPM version](https://badge.fury.io/js/koa-router.png)](http://badge.fury.io/js/koa-router)\n\n* Express-style routing using `app.get`, `app.put`, `app.post`, etc.\n* Named URL parameters and regexp captures.\n* String or regular expression route matching.\n* Named routes with URL generation.\n* Responds to `OPTIONS` requests with allowed methods.\n* Support for `405 Method Not Allowed` and `501 Not Implemented`.\n* Multiple route middleware.\n* Multiple routers.\n\n## Install\n\nkoa-router is available using [npm](https://npmjs.org):\n\n```\nnpm install koa-router\n```\n\n## Usage\n\nRequire the router and mount the middleware:\n\n```javascript\nvar koa = require('koa')\n  , router = require('koa-router')\n  , app = koa();\n\napp.use(router(app));\n```\n\nAfter the router has been initialized you can register routes:\n\n```javascript\napp.get('/users/:id', function *(next) {\n  var user = yield User.findOne(this.params.id);\n  this.body = user;\n});\n```\n\n### Multiple routers\n\nYou can use multiple routers and sets of routes by omitting the `app`\nargument. For example, separate routers for two versions of an API:\n\n```javascript\nvar koa = require('koa');\n  , mount = require('koa-mount')\n  , Router = require('koa-router');\n\nvar app = koa();\n\nvar APIv1 = new Router();\nvar APIv2 = new Router();\n\nAPIv1.get('/sign-in', function *() {\n  // ...\n});\n\nAPIv2.get('/sign-in', function *() {\n  // ...\n});\n\napp\n  .use(mount('/v1', APIv1.middleware()))\n  .use(mount('/v2', APIv2.middleware()));\n```\n\n### Chaining\n\nThe http methods (get, post, etc) return their `Router` instance,\nso routes can be chained as you're used to with express:\n\n```javascript\nvar api = new Router();\n\napi\n  .get('/foo', showFoo)\n  .get('/bar', showBar)\n  .post('/foo', createFoo);\n```\n\n## API\n\n### Migrating from 2.x to 3.x\n\nResource routing was separated into the\n[koa-resource-router](https://github.com/alexmingoia/koa-resource-router)\nmodule.\n\n### Router#verb([name, ]path, middleware[, middleware...])\n\nMatch URL patterns to callback functions or controller actions using `router.verb()`,\nwhere **verb** is one of the HTTP verbs such as `router.get()` or `router.post()`.\n\n```javascript\napp\n  .get('/', function *(next) {\n    this.body = 'Hello World!';\n  })\n  .post('/users', function *(next) {\n    // ...\n  })\n  .put('/users/:id', function *(next) {\n    // ...\n  })\n  .del('/users/:id', function *(next) {\n    // ...\n  });\n```\n\nRoute paths will be translated to regular expressions used to match requests.\n\nQuery strings will not be considered when matching requests.\n\n#### Named routes\n\nRoutes can optionally have names. This allows generation of URLs and easy\nrenaming of URLs during development.\n\n```javascript\napp.get('user', '/users/:id', function *(next) {\n // ...\n});\n\napp.url('user', 3);\n// => \"/users/3\"\n```\n\n#### Multiple middleware\n\nMultiple middleware may be given and are composed using\n[koa-compose](https://github.com/koajs/koa-compose):\n\n```javascript\napp.get(\n  '/users/:id',\n  function *(next) {\n    this.user = yield User.findOne(this.params.id);\n    yield next;\n  },\n  function *(next) {\n    console.log(this.user);\n    // => { id: 17, name: \"Alex\" }\n  }\n);\n```\n\n#### URL parameters\n\nNamed route parameters are captured and added to `ctx.params`.\n\nCapture groups from regular expression routes are also added to\n`ctx.params`, which is an array.\n\n##### Named parameters\n\n```javascript\napp.get('/:category/:title', function *(next) {\n  console.log(this.params);\n  // => [ category: 'programming', title: 'how-to-node' ]\n});\n```\n\n##### Parameter middleware\n\nRun middleware for named route parameters. Useful for auto-loading or\nvalidation.\n\n```javascript\napp\n  .param('user', function *(id, next) {\n    this.user = users[id];\n    if (!this.user) return this.status = 404;\n    yield next;\n  })\n  .get('/users/:user', function *(next) {\n    this.body = this.user;\n  })\n```\n\n##### Regular expressions\n\nControl route matching exactly by specifying a regular expression instead of\na path string when creating the route. For example, it might be useful to match\ndate formats for a blog, such as `/blog/2013-09-04`:\n\n```javascript\napp.get(/^\\/blog\\/\\d{4}-\\d{2}-\\d{2}\\/?$/i, function *(next) {\n  // ...\n});\n```\n\n#### Multiple methods\n\nCreate routes with multiple HTTP methods using `router.register()`:\n\n```javascript\napp.register('/', ['get', 'post'], function *(next) {\n  // ...\n});\n```\n\nCreate route for all methods using `router.all()`:\n\n```javascript\napp.all('/', function *(next) {\n  // ...\n});\n```\n\n### Router#redirect(source, destination, [code])\n\nRedirect `source` to `destination` URL with optional 30x status `code`.\n\nBoth `source` and `destination` can be route names.\n\n```javascript\napp.redirect('/login', 'sign-in');\n```\n\nThis is equivalent to:\n\n```javascript\napp.all('/login', function *() {\n  this.redirect('/sign-in');\n  this.status = 301;\n});\n```\n\n### Router#route(name)\n\nLookup route with given `name`. Returns the route or `false`.\n\n### Router#url(name, params)\n\nGenerate URL for route. Takes either map of named `params` or series of\narguments (for regular expression routes).\n\nReturns `Error` if no route is found with given `name`.\n\n```javascript\napp.get('user', '/users/:id', function *(next) {\n // ...\n});\n\napp.url('user', 3);\n// => \"/users/3\"\n\napp.url('user', { id: 3 });\n// => \"/users/3\"\n```\n\n## Tests\n\nTests use [mocha](https://github.com/visionmedia/mocha) and can be run\nwith [npm](https://npmjs.org):\n\n```\nnpm test\n```\n\n## MIT Licensed\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexmingoia/koa-router/issues"
  },
  "homepage": "https://github.com/alexmingoia/koa-router",
  "_id": "koa-router@3.3.0",
  "_shasum": "5779e079f61b65180b9a39cb62ae3a4c9900c613",
  "_from": "koa-router@^3.1.4",
  "_resolved": "https://registry.npmjs.org/koa-router/-/koa-router-3.3.0.tgz"
}
